@model quangcao.Models.SanPham

@functions {
    bool IsVideo(string fileName)
    {
        var videoExtensions = new[] { ".mp4", ".webm", ".ogg", ".avi", ".mov", ".mkv" };
        return videoExtensions.Any(ext => fileName.ToLower().EndsWith(ext));
    }
}

<div class="qv-row">
    <div class="qv-image">
        @if (!string.IsNullOrEmpty(Model.HinhAnh))
        {
            var images = Model.HinhAnh.Split(';');
            <div class="qv-main-image-wrapper">
                <div class="qv-media-nav-btn qv-media-nav-btn-left" id="prevImage">
                    <i class="fas fa-chevron-left"></i>
                </div>
                <div id="quickViewMainContainer">
                    @{
                        var mainExt = System.IO.Path.GetExtension(images[0]).ToLower();
                    }
                    @if (IsVideo(images[0]))
                    {
                        <div class="video-container">
                            <video id="mainVideo" 
                                   src="/@images[0]" 
                                   controls 
                                   preload="metadata"
                                   class="video-player">
                                Trình duyệt của bạn không hỗ trợ video.
                            </video>
                        </div>
                    }
                    else
                    {
                        <img id="quickViewMainImage" src="/@images[0]" alt="@Model.TenSanPham" class="qv-main-image" />
                    }
                </div>
                <div class="qv-media-nav-btn qv-media-nav-btn-right" id="nextImage">
                    <i class="fas fa-chevron-right"></i>
                </div>
            </div>

            <div class="qv-thumbnail-container">
                @for (int i = 0; i < images.Length; i++)
                {
                    var img = images[i];
                    var ext = System.IO.Path.GetExtension(img).ToLower();
                    <div class="qv-thumbnail" data-src="/@img" data-type="@(IsVideo(img) ? "video" : "image")" data-index="@i">
                        @if (IsVideo(img))
                        {
                            <div class="video-thumbnail">
                                <img src="/@img.Replace(ext, ".jpg")" alt="Video thumbnail" class="thumbnail" />
                                <div class="video-overlay">
                                    <i class="fas fa-play-circle"></i>
                                </div>
                            </div>
                        }
                        else
                        {
                            <img src="/@img" alt="@Model.TenSanPham" class="thumbnail" />
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <div class="qv-no-image">
                <i class="fas fa-image"></i>
                <p>Không có hình ảnh</p>
            </div>
        }
    </div>

    <div class="qv-details">
        <h2 class="qv-product-name">@Model.TenSanPham</h2>

        @if (Model.DanhGias != null && Model.DanhGias.Any())
        {
            var avgRating = Model.DanhGias.Average(d => d.SoSao);
            <div class="qv-product-rating">
                <div class="qv-stars">
                    @for (int i = 1; i <= 5; i++)
                    {
                        if (i <= Math.Floor(avgRating))
                        {
                            <i class="fas fa-star"></i> <!-- Sao đầy đủ -->
                        }
                        else if (i - avgRating < 1 && i - avgRating > 0)
                        {
                            <i class="fas fa-star-half-alt"></i> <!-- Nửa sao -->
                        }
                        else
                        {
                            <i class="far fa-star"></i> <!-- Sao rỗng -->
                        }
                    }
                </div>
                <span class="qv-rating-count">(@Model.DanhGias.Count() đánh giá)</span>
            </div>
        }

        <div class="qv-product-price">
            @string.Format("{0:N3}", Model.Gia)<span class="qv-currency">đ</span>
        </div>

        @if (!string.IsNullOrEmpty(Model.MoTa))
        {
            <div class="qv-product-description">
                @Html.Raw(Model.MoTa.Length > 300 ? Model.MoTa.Substring(0, 300) + "..." : Model.MoTa)
            </div>
        }

        <div class="qv-product-actions">
            <a href="/SanPhams/Details/@Model.IdSanPham" class="qv-btn-view-details">
                <i class="fas fa-info-circle"></i> Xem chi tiết
            </a>
            <a href="/LienHe?idSanPham=@Model.IdSanPham&tenSanPham=@Model.TenSanPham" class="qv-btn-contact">
                <i class="fas fa-phone-alt"></i> Liên hệ báo giá
            </a>
            <button type="button" class="qv-btn-add-wishlist" onclick="addToWishlist('@Model.IdSanPham')">
                <i class="far fa-heart"></i>
            </button>
        </div>

        <div class="qv-contact-info">
            <div class="qv-contact-item">
                <i class="fas fa-phone-alt"></i>
                <div>
                    <span class="qv-contact-label">Hotline</span>
                    <a href="tel:1900123456" class="qv-contact-value">1900 123 456</a>
                </div>
            </div>
            <div class="qv-contact-item">
                <i class="fas fa-envelope"></i>
                <div>
                    <span class="qv-contact-label">Email</span>
                    <a href="mailto:sales@example.com" class="qv-contact-value">sales@example.com</a>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Quick View Modal Styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 1;
        }

    .modal-content {
        position: relative;
        background-color: #fff;
        margin: auto;
        padding: 0;
        border-radius: 12px;
        width: 90%;
        max-width: 1000px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        animation: qvModalFadeIn 0.3s;
    }

    keyframes qvModalFadeIn {
        from

    {
        opacity: 0;
        transform: translateY(-20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .close-modal {
        position: absolute;
        top: 15px;
        right: 15px;
        color: #333;
        font-size: 24px;
        font-weight: bold;
        cursor: pointer;
        z-index: 10;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f8f8f8;
        border-radius: 50%;
        transition: all 0.3s ease;
    }

        .close-modal:hover {
            background-color: #e0e0e0;
            transform: rotate(90deg);
        }

    .quick-view-content {
        padding: 30px;
    }

    /* Loading spinner */
    .loading-spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px;
        color: #666;
    }

        .loading-spinner i {
            font-size: 40px;
            margin-bottom: 15px;
            color: #2563eb;
            animation: qvSpin 1s linear infinite;
        }

    keyframes qvSpin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    /* Error message */
    .error-message {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px;
        color: #666;
    }

        .error-message i {
            font-size: 40px;
            margin-bottom: 15px;
            color: #ef4444;
        }

    .btn-retry {
        margin-top: 15px;
        padding: 10px 20px;
        background-color: #2563eb;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 500;
    }

        .btn-retry:hover {
            background-color: #1d4ed8;
            transform: translateY(-2px);
        }

    /* Quick View Container Styles */
    .qv-container {
        width: 100%;
    }

    .qv-row {
        display: flex;
        flex-wrap: wrap;
        gap: 40px;
    }

    /* Image Section */
    .qv-image {
        flex: 1;
        min-width: 300px;
    }

    .qv-main-image-wrapper {
        position: relative;
        width: 100%;
        border-radius: 12px;
        overflow: hidden;
        background-color: #000;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        min-height: 400px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .qv-media-nav-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 48px;
        height: 48px;
        background: rgba(255,255,255,0.8);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 2;
        font-size: 20px;
        transition: background 0.2s;
    }

    .qv-media-nav-btn-left {
        left: 10px;
    }

    .qv-media-nav-btn-right {
        right: 10px;
    }

    .qv-media-nav-btn:hover {
        background: #2563eb;
        color: #fff;
    }

    .qv-main-image {
        width: 100%;
        height: 400px;
        object-fit: contain;
        background: #000;
        border-radius: 12px;
    }

    .qv-thumbnail-container {
        display: flex;
        gap: 10px;
        margin-top: 15px;
        overflow-x: auto;
        padding-bottom: 10px;
        scrollbar-width: thin;
        scrollbar-color: #cbd5e1 #f1f5f9;
        justify-content: center;
    }

        .qv-thumbnail-container::-webkit-scrollbar {
            height: 6px;
        }

        .qv-thumbnail-container::-webkit-scrollbar-track {
            background: #f1f5f9;
            border-radius: 10px;
        }

        .qv-thumbnail-container::-webkit-scrollbar-thumb {
            background-color: #cbd5e1;
            border-radius: 10px;
        }

    .qv-thumbnail {
        width: 70px;
        height: 70px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        overflow: hidden;
        cursor: pointer;
        transition: all 0.3s ease;
        flex-shrink: 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .qv-thumbnail:hover {
            border-color: #2563eb;
            transform: translateY(-2px);
        }

        .qv-thumbnail.active {
            border-color: #2563eb;
            box-shadow: 0 0 0 2px #2563eb33;
        }

        .qv-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .qv-no-image {
        width: 100%;
        height: 300px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background-color: #f3f4f6;
        border-radius: 12px;
        color: #9ca3af;
    }

        .qv-no-image i {
            font-size: 48px;
            margin-bottom: 10px;
        }

    /* Details Section */
    .qv-details {
        flex: 1;
        min-width: 300px;
    }

    .qv-product-name {
        font-size: 28px;
        font-weight: 700;
        margin: 0 0 15px 0;
        color: #111827;
        line-height: 1.3;
    }

    .qv-product-rating {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 15px;
    }

    .qv-stars {
        display: flex;
        gap: 2px;
    }

        .qv-stars .fas.fa-star {
            color: #f59e0b;
        }

        .qv-stars .fas.fa-star-half-alt {
            color: #f59e0b;
        }

        .qv-stars .far.fa-star {
            color: #d1d5db;
        }

    .qv-rating-count {
        font-size: 14px;
        color: #6b7280;
    }

    .qv-product-price {
        font-size: 28px;
        font-weight: 700;
        color: #e53e3e;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
    }

    .qv-currency {
        font-size: 18px;
        margin-left: 4px;
    }

    .qv-product-description {
        margin-bottom: 25px;
        color: #4b5563;
        line-height: 1.7;
        font-size: 15px;
        border-bottom: 1px solid #e5e7eb;
        padding-bottom: 20px;
    }

    /* Product Features */
    .qv-product-features {
        margin-bottom: 25px;
    }

    .qv-features-title {
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 12px;
        color: #111827;
    }

    .qv-features-list {
        list-style: none;
        padding: 0;
        margin: 0;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 8px 20px;
    }

        .qv-features-list li {
            display: flex;
            align-items: center;
            gap: 8px;
            color: #4b5563;
            font-size: 14px;
        }

            .qv-features-list li i {
                color: #10b981;
                font-size: 14px;
            }

    /* Product Actions */
    .qv-product-actions {
        display: flex;
        gap: 12px;
        margin-bottom: 25px;
    }

    .qv-btn-view-details {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        padding: 12px 24px;
        background-color: #2563eb;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.3s ease;
        font-size: 15px;
    }

        .qv-btn-view-details:hover {
            background-color: #1d4ed8;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(37, 99, 235, 0.2);
        }

    .qv-btn-contact {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        padding: 12px 24px;
        background-color: #f59e0b;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.3s ease;
        font-size: 15px;
    }

        .qv-btn-contact:hover {
            background-color: #d97706;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(245, 158, 11, 0.2);
        }

    .qv-btn-add-wishlist {
        width: 46px;
        height: 46px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: white;
        color: #6b7280;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        font-size: 18px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .qv-btn-add-wishlist:hover {
            border-color: #e53e3e;
            color: #e53e3e;
            transform: translateY(-2px);
        }

    /* Contact Info */
    .qv-contact-info {
        margin-top: 25px;
        padding-top: 20px;
        border-top: 1px solid #e5e7eb;
    }

    .qv-contact-item {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 12px;
    }

        .qv-contact-item i {
            width: 36px;
            height: 36px;
            background-color: rgba(37, 99, 235, 0.1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #2563eb;
            font-size: 16px;
        }

    .qv-contact-label {
        display: block;
        font-size: 13px;
        color: #6b7280;
        margin-bottom: 2px;
    }

    .qv-contact-value {
        font-weight: 500;
        color: #111827;
        text-decoration: none;
        transition: color 0.2s ease;
    }

        .qv-contact-value:hover {
            color: #2563eb;
        }

    /* Responsive adjustments */
    media (max-width: 768px) {
        .qv-row

    {
        flex-direction: column;
        gap: 25px;
    }

    .qv-image {
        min-width: 100%;
    }

    .qv-details {
        min-width: 100%;
    }

    .qv-product-name {
        font-size: 22px;
    }

    .qv-product-price {
        font-size: 24px;
    }

    .qv-features-list {
        grid-template-columns: 1fr;
    }

    .qv-product-actions {
        flex-wrap: wrap;
    }

    .qv-btn-view-details,
    .qv-btn-contact {
        flex: 1;
        min-width: 120px;
        padding: 10px 16px;
        font-size: 14px;
    }

    .qv-btn-add-wishlist {
        width: 42px;
        height: 42px;
    }

    .modal-content {
        width: 95%;
    }

    .quick-view-content {
        padding: 20px;
    }

    }

    /* Toast notification styles */
    #qv-toast-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 9999;
    }

    .qv-toast {
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        margin-top: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: space-between;
        min-width: 300px;
        transform: translateY(20px);
        opacity: 0;
        transition: all 0.3s ease;
    }

    .qv-toast-success {
        background-color: #10b981;
    }

    .qv-toast-error {
        background-color: #ef4444;
    }

    .qv-toast-warning {
        background-color: #f59e0b;
    }

    .qv-toast-info {
        background-color: #3b82f6;
    }

    .video-container {
        position: relative;
        width: 100%;
        padding-top: 56.25%;
        background: #000;
        border-radius: 12px;
        overflow: hidden;
    }

    .video-player {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: contain;
    }

    .video-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.3);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .video-overlay i {
        color: white;
        font-size: 24px;
    }

    .video-thumbnail {
        position: relative;
        width: 100%;
        height: 100%;
        background: #000;
        border-radius: 8px;
        overflow: hidden;
    }

    .video-thumbnail img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
</style>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        initQuickViewGallery();
    });

    function initQuickViewGallery() {
        const mainContainer = document.getElementById('quickViewMainContainer');
        const thumbnails = document.querySelectorAll('.qv-thumbnail');
        const prevBtn = document.getElementById('prevImage');
        const nextBtn = document.getElementById('nextImage');

        if (!mainContainer || thumbnails.length === 0) return;

        let currentIndex = 0;
        const maxIndex = thumbnails.length - 1;

        // Set first thumbnail as active
        thumbnails[0].classList.add('active');

        function updateContent(index) {
            if (index < 0) index = maxIndex;
            if (index > maxIndex) index = 0;

            currentIndex = index;

            // Update active thumbnail
            thumbnails.forEach(thumb => thumb.classList.remove('active'));
            thumbnails[index].classList.add('active');

            const thumbnail = thumbnails[index];
            const src = thumbnail.getAttribute('data-src');
            const type = thumbnail.getAttribute('data-type');

            // Clean up existing video if any
            const existingVideo = mainContainer.querySelector('video');
            if (existingVideo) {
                existingVideo.pause();
            }

            if (type === 'video') {
                mainContainer.innerHTML = `
                    <div class="video-container">
                        <video id="mainVideo" 
                               src="${src}" 
                               controls 
                               preload="metadata"
                               class="video-player">
                            Trình duyệt của bạn không hỗ trợ video.
                        </video>
                    </div>`;
            } else {
                mainContainer.innerHTML = `
                    <img id="quickViewMainImage" 
                         src="${src}" 
                         alt="Hình ảnh sản phẩm" 
                         class="qv-main-image" />`;
            }

            // Scroll thumbnail into view
            thumbnails[index].scrollIntoView({
                behavior: 'smooth',
                block: 'nearest',
                inline: 'center'
            });
        }

        // Add click handlers to thumbnails
        thumbnails.forEach((thumbnail, index) => {
            thumbnail.addEventListener('click', () => {
                updateContent(index);
            });
        });

        // Add click handlers to navigation buttons
        if (prevBtn) {
            prevBtn.addEventListener('click', () => {
                updateContent(currentIndex - 1);
            });
        }

        if (nextBtn) {
            nextBtn.addEventListener('click', () => {
                updateContent(currentIndex + 1);
            });
        }

        // Add keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (document.getElementById('quickViewModal').classList.contains('show')) {
                if (e.key === 'ArrowLeft') {
                    updateContent(currentIndex - 1);
                } else if (e.key === 'ArrowRight') {
                    updateContent(currentIndex + 1);
                }
            }
        });
    }

    // Add to wishlist function
    function addToWishlist(productId) {
        const button = event.currentTarget;
        const icon = button.querySelector("i");

        // Toggle heart icon
        if (icon.classList.contains("far")) {
            icon.classList.remove("far");
            icon.classList.add("fas");
            icon.style.color = "#e53e3e";

            // Show success message
            showQuickViewToast("Đã thêm vào danh sách yêu thích", "success");
        } else {
            icon.classList.remove("fas");
            icon.classList.add("far");
            icon.style.color = "";

            // Show remove message
            showQuickViewToast("Đã xóa khỏi danh sách yêu thích", "info");
        }

        // Send request to server
        fetch("/SanPhamYeuThiches/ToggleWishlist", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-TOKEN": document.querySelector('input[name="__RequestVerificationToken"]')?.value || "",
            },
            body: JSON.stringify({ productId: productId }),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then((data) => {
                console.log("Wishlist updated:", data);
            })
            .catch((error) => {
                console.error("Error updating wishlist:", error);
                showQuickViewToast("Có lỗi xảy ra. Vui lòng thử lại sau.", "error");
            });
    }

    // Toast notification function
    function showQuickViewToast(message, type = "info") {
        // Check if toast container exists, if not create it
        let toastContainer = document.getElementById("qv-toast-container");
        if (!toastContainer) {
            toastContainer = document.createElement("div");
            toastContainer.id = "qv-toast-container";
            document.body.appendChild(toastContainer);
        }

        // Create toast element
        const toast = document.createElement("div");
        toast.className = `qv-toast qv-toast-${type}`;

        // Set toast content
        toast.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <i class="fas fa-${
                    type === "success"
                        ? "check-circle"
                        : type === "error"
                          ? "exclamation-circle"
                          : type === "warning"
                            ? "exclamation-triangle"
                            : "info-circle"
                }"></i>
                <span>${message}</span>
            </div>
            <button style="background: none; border: none; color: white; cursor: pointer; font-size: 16px;">
                <i class="fas fa-times"></i>
            </button>
        `;

        // Add to container
        toastContainer.appendChild(toast);

        // Animate in
        setTimeout(() => {
            toast.style.transform = "translateY(0)";
            toast.style.opacity = "1";
        }, 10);

        // Add close button functionality
        const closeBtn = toast.querySelector("button");
        closeBtn.addEventListener("click", () => {
            closeQuickViewToast(toast);
        });

        // Auto close after 4 seconds
        setTimeout(() => {
            closeQuickViewToast(toast);
        }, 4000);
    }

    function closeQuickViewToast(toast) {
        toast.style.transform = "translateY(20px)";
        toast.style.opacity = "0";

        setTimeout(() => {
            toast.remove();
        }, 300);
    }

    // Sử dụng form liên hệ hiện có thay vì mở modal báo giá
    function contactUs(idSanPham, tenSanPham) {
        // Chuyển hướng đến trang liên hệ với thông tin sản phẩm
        window.location.href = `/LienHe?idSanPham=${idSanPham}&tenSanPham=${tenSanPham}`;
    }
</script>