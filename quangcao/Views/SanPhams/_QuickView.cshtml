@model quangcao.Models.SanPham

@functions {
    bool IsVideo(string fileName)
    {
        var videoExtensions = new[] { ".mp4", ".webm", ".ogg", ".avi", ".mov", ".mkv" };
        return videoExtensions.Any(ext => fileName.ToLower().EndsWith(ext));
    }

    string FixSrc(string path)
    {
        if (string.IsNullOrEmpty(path)) return "";
        path = path.TrimStart('/');
        if (path.StartsWith("img/sanpham/"))
            return "/" + path;
        return "/img/sanpham/" + path;
    }
}

<link rel="stylesheet" href="~/css/quickview.css" />

<div class="qv-row">
    <div class="qv-image">
        @if (!string.IsNullOrEmpty(Model.HinhAnh))
        {
            var images = Model.HinhAnh.Split(';').Where(img => !IsVideo(img)).ToArray();
            if (images.Length > 0)
            {
                <div class="qv-main-image-wrapper">
                    <div class="qv-media-nav-btn qv-media-nav-btn-left" id="prevImage">
                        <i class="fas fa-chevron-left"></i>
                    </div>
                    <div id="quickViewMainContainer">
                        <img id="quickViewMainImage" src="@FixSrc(images[0])" alt="@Model.TenSanPham" class="qv-main-image" />
                    </div>
                    <div class="qv-media-nav-btn qv-media-nav-btn-right" id="nextImage">
                        <i class="fas fa-chevron-right"></i>
                    </div>
                </div>

                <div class="qv-thumbnail-container">
                    @for (int i = 0; i < images.Length; i++)
                    {
                        var img = images[i];
                        var imgSrc = FixSrc(img);
                        <div class="qv-thumbnail @(i == 0 ? "active" : "")" data-src="@imgSrc" data-type="image" data-index="@i">
                            <img src="@imgSrc" alt="@Model.TenSanPham" class="thumbnail" />
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="qv-no-image">
                    <i class="fas fa-image"></i>
                    <p>Không có hình ảnh</p>
                </div>
            }
        }
        else
        {
            <div class="qv-no-image">
                <i class="fas fa-image"></i>
                <p>Không có hình ảnh</p>
            </div>
        }
    </div>

    <div class="qv-details">
        <h2 class="qv-product-name">@Model.TenSanPham</h2>

        @if (Model.DanhGias != null && Model.DanhGias.Any())
        {
            var avgRating = Model.DanhGias.Average(d => d.SoSao);
            <div class="qv-product-rating">
                <div class="qv-stars">
                    @for (int i = 1; i <= 5; i++)
                    {
                        if (i <= Math.Floor(avgRating))
                        {
                            <i class="fas fa-star"></i>
                        }
                        else if (i - avgRating < 1 && i - avgRating > 0)
                        {
                            <i class="fas fa-star-half-alt"></i>
                        }
                        else
                        {
                            <i class="far fa-star"></i>
                        }
                    }
                </div>
                <span class="qv-rating-count">(@Model.DanhGias.Count() đánh giá)</span>
            </div>
        }

        <div class="qv-product-price">
            @string.Format("{0:N3}", Model.Gia)<span class="qv-currency">đ</span>
        </div>

        @if (!string.IsNullOrEmpty(Model.MoTa))
        {
            <div class="qv-product-description">
                @Html.Raw(Model.MoTa.Length > 300 ? Model.MoTa.Substring(0, 300) + "..." : Model.MoTa)
            </div>
        }

        <div class="qv-product-actions">
            <a href="/SanPhams/Details/@Model.IdSanPham" class="qv-btn-view-details">
                <i class="fas fa-info-circle"></i> Xem chi tiết
            </a>
            <a href="/LienHes/Create?idSanPham=@Model.IdSanPham&tenSanPham=@Model.TenSanPham" class="qv-btn-contact">
                <i class="fas fa-phone-alt"></i> Liên hệ báo giá
            </a>
            <button type="button" class="qv-btn-add-wishlist" onclick="addToWishlist('@Model.IdSanPham')">
                <i class="far fa-heart"></i>
            </button>
        </div>

        <div class="qv-contact-info">
            <div class="qv-contact-item">
                <i class="fas fa-phone-alt"></i>
                <div>
                    <span class="qv-contact-label">Hotline</span>
                    <a href="tel:1900123456" class="qv-contact-value">1900 123 456</a>
                </div>
            </div>
            <div class="qv-contact-item">
                <i class="fas fa-envelope"></i>
                <div>
                    <span class="qv-contact-label">Email</span>
                    <a href="mailto:sales@example.com" class="qv-contact-value">sales@example.com</a>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const mainContainer = document.getElementById('quickViewMainContainer');
        const thumbnails = document.querySelectorAll('.qv-thumbnail');
        const prevBtn = document.getElementById('prevImage');
        const nextBtn = document.getElementById('nextImage');
        let currentIndex = 0;
        if (thumbnails.length === 0) return;

        function updateContent(index) {
            const maxIndex = thumbnails.length - 1;
            if (index < 0) index = maxIndex;
            if (index > maxIndex) index = 0;
            currentIndex = index;
            thumbnails.forEach(thumb => thumb.classList.remove('active'));
            thumbnails[index].classList.add('active');
            const thumbnail = thumbnails[index];
            const src = thumbnail.getAttribute('data-src');
            mainContainer.innerHTML = `
                <img id="quickViewMainImage" 
                     src="${src}" 
                     alt="Hình ảnh sản phẩm" 
                     class="qv-main-image" />`;
            thumbnails[index].scrollIntoView({
                behavior: 'smooth',
                block: 'nearest',
                inline: 'center'
            });
        }

        thumbnails.forEach((thumbnail, index) => {
            thumbnail.addEventListener('click', () => {
                updateContent(index);
            });
        });
        if (prevBtn) {
            prevBtn.addEventListener('click', () => {
                updateContent(currentIndex - 1);
            });
        }
        if (nextBtn) {
            nextBtn.addEventListener('click', () => {
                updateContent(currentIndex + 1);
            });
        }
        document.addEventListener('keydown', (e) => {
            if (document.getElementById('quickViewModal')?.classList.contains('show')) {
                if (e.key === 'ArrowLeft') {
                    updateContent(currentIndex - 1);
                } else if (e.key === 'ArrowRight') {
                    updateContent(currentIndex + 1);
                }
            }
        });
    });

    // Add to wishlist function
    function addToWishlist(productId) {
        const button = event.currentTarget;
        const icon = button.querySelector("i");

        // Toggle heart icon
        if (icon.classList.contains("far")) {
            icon.classList.remove("far");
            icon.classList.add("fas");
            icon.style.color = "#e53e3e";

            // Show success message
            showQuickViewToast("Đã thêm vào danh sách yêu thích", "success");
        } else {
            icon.classList.remove("fas");
            icon.classList.add("far");
            icon.style.color = "";

            // Show remove message
            showQuickViewToast("Đã xóa khỏi danh sách yêu thích", "info");
        }

        // Send request to server
        fetch("/SanPhamYeuThiches/ToggleWishlist", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-TOKEN": document.querySelector('input[name="__RequestVerificationToken"]')?.value || "",
            },
            body: JSON.stringify({ productId: productId }),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then((data) => {
                console.log("Wishlist updated:", data);
            })
            .catch((error) => {
                console.error("Error updating wishlist:", error);
                showQuickViewToast("Có lỗi xảy ra. Vui lòng thử lại sau.", "error");
            });
    }

    // Toast notification function
    function showQuickViewToast(message, type = "info") {
        // Check if toast container exists, if not create it
        let toastContainer = document.getElementById("qv-toast-container");
        if (!toastContainer) {
            toastContainer = document.createElement("div");
            toastContainer.id = "qv-toast-container";
            document.body.appendChild(toastContainer);
        }

        // Create toast element
        const toast = document.createElement("div");
        toast.className = `qv-toast qv-toast-${type}`;

        // Set toast content
        toast.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <i class="fas fa-${
                    type === "success"
                        ? "check-circle"
                        : type === "error"
                          ? "exclamation-circle"
                          : type === "warning"
                            ? "exclamation-triangle"
                            : "info-circle"
                }"></i>
                <span>${message}</span>
            </div>
            <button style="background: none; border: none; color: white; cursor: pointer; font-size: 16px;">
                <i class="fas fa-times"></i>
            </button>
        `;

        // Add to container
        toastContainer.appendChild(toast);

        // Animate in
        setTimeout(() => {
            toast.style.transform = "translateY(0)";
            toast.style.opacity = "1";
        }, 10);

        // Add close button functionality
        const closeBtn = toast.querySelector("button");
        closeBtn.addEventListener("click", () => {
            closeQuickViewToast(toast);
        });

        // Auto close after 4 seconds
        setTimeout(() => {
            closeQuickViewToast(toast);
        }, 4000);
    }

    function closeQuickViewToast(toast) {
        toast.style.transform = "translateY(20px)";
        toast.style.opacity = "0";

        setTimeout(() => {
            toast.remove();
        }, 300);
    }

    // Sử dụng form liên hệ hiện có thay vì mở modal báo giá
    function contactUs(idSanPham, tenSanPham) {
        // Chuyển hướng đến trang liên hệ với thông tin sản phẩm
        window.location.href = `/LienHe?idSanPham=${idSanPham}&tenSanPham=${tenSanPham}`;
    }
</script>