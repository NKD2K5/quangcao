@model quangcao.Models.SanPham

<div class="qv-row">
    <div class="qv-image">
        @if (!string.IsNullOrEmpty(Model.HinhAnh))
        {
            var images = Model.HinhAnh.Split(';');
            <div class="qv-main-image-wrapper">
                <img id="quickViewMainImage" src="~/@images[0]" alt="@Model.TenSanPham" class="qv-main-image" />

                @if (images.Length > 1)
                {
                    <div class="qv-image-nav">
                        <button type="button" class="qv-image-nav-btn" id="prevImage">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <button type="button" class="qv-image-nav-btn" id="nextImage">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                }
            </div>

            @if (images.Length > 1)
            {
                <div class="qv-thumbnail-container">
                    @foreach (var img in images)
                    {
                        <div class="qv-thumbnail">
                            <img src="~/@img" alt="@Model.TenSanPham" />
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <div class="qv-no-image">
                <i class="fas fa-image"></i>
                <p>Không có hình ảnh</p>
            </div>
        }
    </div>

    <div class="qv-details">
        <h2 class="qv-product-name">@Model.TenSanPham</h2>

        @if (Model.DanhGias != null && Model.DanhGias.Any())
        {
            var avgRating = Model.DanhGias.Average(d => d.SoSao);
            <div class="qv-product-rating">
                <div class="qv-stars">
                    @for (int i = 1; i <= 5; i++)
                    {
                        if (i <= Math.Floor(avgRating))
                        {
                            <i class="fas fa-star"></i> <!-- Sao đầy đủ -->
                        }
                        else if (i - avgRating < 1 && i - avgRating > 0)
                        {
                            <i class="fas fa-star-half-alt"></i> <!-- Nửa sao -->
                        }
                        else
                        {
                            <i class="far fa-star"></i> <!-- Sao rỗng -->
                        }
                    }
                </div>
                <span class="qv-rating-count">(@Model.DanhGias.Count() đánh giá)</span>
            </div>
        }

        <div class="qv-product-price">
            @string.Format("{0:N3}", Model.Gia)<span class="qv-currency">đ</span>
        </div>

        @if (!string.IsNullOrEmpty(Model.MoTa))
        {
            <div class="qv-product-description">
                @Html.Raw(Model.MoTa.Length > 300 ? Model.MoTa.Substring(0, 300) + "..." : Model.MoTa)
            </div>
        }

        <div class="qv-product-actions">
            <a href="/SanPhams/Details/@Model.IdSanPham" class="qv-btn-view-details">
                <i class="fas fa-info-circle"></i> Xem chi tiết
            </a>
            <a href="/LienHe?idSanPham=@Model.IdSanPham&tenSanPham=@Model.TenSanPham" class="qv-btn-contact">
                <i class="fas fa-phone-alt"></i> Liên hệ báo giá
            </a>
            <button type="button" class="qv-btn-add-wishlist" onclick="addToWishlist('@Model.IdSanPham')">
                <i class="far fa-heart"></i>
            </button>
        </div>

        <div class="qv-contact-info">
            <div class="qv-contact-item">
                <i class="fas fa-phone-alt"></i>
                <div>
                    <span class="qv-contact-label">Hotline</span>
                    <a href="tel:1900123456" class="qv-contact-value">1900 123 456</a>
                </div>
            </div>
            <div class="qv-contact-item">
                <i class="fas fa-envelope"></i>
                <div>
                    <span class="qv-contact-label">Email</span>
                    <a href="mailto:sales@example.com" class="qv-contact-value">sales@example.com</a>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Quick View Modal Styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 1;
        }

    .modal-content {
        position: relative;
        background-color: #fff;
        margin: auto;
        padding: 0;
        border-radius: 12px;
        width: 90%;
        max-width: 1000px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        animation: qvModalFadeIn 0.3s;
    }

    keyframes qvModalFadeIn {
        from

    {
        opacity: 0;
        transform: translateY(-20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .close-modal {
        position: absolute;
        top: 15px;
        right: 15px;
        color: #333;
        font-size: 24px;
        font-weight: bold;
        cursor: pointer;
        z-index: 10;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f8f8f8;
        border-radius: 50%;
        transition: all 0.3s ease;
    }

        .close-modal:hover {
            background-color: #e0e0e0;
            transform: rotate(90deg);
        }

    .quick-view-content {
        padding: 30px;
    }

    /* Loading spinner */
    .loading-spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px;
        color: #666;
    }

        .loading-spinner i {
            font-size: 40px;
            margin-bottom: 15px;
            color: #2563eb;
            animation: qvSpin 1s linear infinite;
        }

    keyframes qvSpin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    /* Error message */
    .error-message {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px;
        color: #666;
    }

        .error-message i {
            font-size: 40px;
            margin-bottom: 15px;
            color: #ef4444;
        }

    .btn-retry {
        margin-top: 15px;
        padding: 10px 20px;
        background-color: #2563eb;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 500;
    }

        .btn-retry:hover {
            background-color: #1d4ed8;
            transform: translateY(-2px);
        }

    /* Quick View Container Styles */
    .qv-container {
        width: 100%;
    }

    .qv-row {
        display: flex;
        flex-wrap: wrap;
        gap: 40px;
    }

    /* Image Section */
    .qv-image {
        flex: 1;
        min-width: 300px;
    }

    .qv-main-image-wrapper {
        position: relative;
        width: 100%;
        border-radius: 12px;
        overflow: hidden;
        background-color: #f9fafb;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }

    .qv-image .qv-main-image {
        width: 100%;
        height: auto;
        border-radius: 12px;
        object-fit: contain;
        max-height: 400px;
        transition: transform 0.3s ease;
    }

    .qv-main-image-wrapper:hover .qv-main-image {
        transform: scale(1.03);
    }

    .qv-image-nav {
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        display: flex;
        justify-content: space-between;
        transform: translateY(-50%);
        padding: 0 10px;
    }

    .qv-image-nav-btn {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.8);
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        color: #333;
        font-size: 14px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        opacity: 0;
    }

    .qv-main-image-wrapper:hover .qv-image-nav-btn {
        opacity: 1;
    }

    .qv-image-nav-btn:hover {
        background-color: white;
        transform: scale(1.1);
    }

    .qv-thumbnail-container {
        display: flex;
        gap: 10px;
        margin-top: 15px;
        overflow-x: auto;
        padding-bottom: 10px;
        scrollbar-width: thin;
        scrollbar-color: #cbd5e1 #f1f5f9;
    }

        .qv-thumbnail-container::-webkit-scrollbar {
            height: 6px;
        }

        .qv-thumbnail-container::-webkit-scrollbar-track {
            background: #f1f5f9;
            border-radius: 10px;
        }

        .qv-thumbnail-container::-webkit-scrollbar-thumb {
            background-color: #cbd5e1;
            border-radius: 10px;
        }

    .qv-thumbnail {
        width: 70px;
        height: 70px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        overflow: hidden;
        cursor: pointer;
        transition: all 0.3s ease;
        flex-shrink: 0;
    }

        .qv-thumbnail:hover {
            border-color: #2563eb;
            transform: translateY(-2px);
        }

        .qv-thumbnail.active {
            border-color: #2563eb;
        }

        .qv-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .qv-thumbnail:hover img {
            transform: scale(1.1);
        }

    .qv-no-image {
        width: 100%;
        height: 300px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background-color: #f3f4f6;
        border-radius: 12px;
        color: #9ca3af;
    }

        .qv-no-image i {
            font-size: 48px;
            margin-bottom: 10px;
        }

    /* Details Section */
    .qv-details {
        flex: 1;
        min-width: 300px;
    }

    .qv-product-name {
        font-size: 28px;
        font-weight: 700;
        margin: 0 0 15px 0;
        color: #111827;
        line-height: 1.3;
    }

    .qv-product-rating {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 15px;
    }

    .qv-stars {
        display: flex;
        gap: 2px;
    }

        .qv-stars .fas.fa-star {
            color: #f59e0b;
        }

        .qv-stars .fas.fa-star-half-alt {
            color: #f59e0b;
        }

        .qv-stars .far.fa-star {
            color: #d1d5db;
        }

    .qv-rating-count {
        font-size: 14px;
        color: #6b7280;
    }

    .qv-product-price {
        font-size: 28px;
        font-weight: 700;
        color: #e53e3e;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
    }

    .qv-currency {
        font-size: 18px;
        margin-left: 4px;
    }

    .qv-product-description {
        margin-bottom: 25px;
        color: #4b5563;
        line-height: 1.7;
        font-size: 15px;
        border-bottom: 1px solid #e5e7eb;
        padding-bottom: 20px;
    }

    /* Product Features */
    .qv-product-features {
        margin-bottom: 25px;
    }

    .qv-features-title {
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 12px;
        color: #111827;
    }

    .qv-features-list {
        list-style: none;
        padding: 0;
        margin: 0;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 8px 20px;
    }

        .qv-features-list li {
            display: flex;
            align-items: center;
            gap: 8px;
            color: #4b5563;
            font-size: 14px;
        }

            .qv-features-list li i {
                color: #10b981;
                font-size: 14px;
            }

    /* Product Actions */
    .qv-product-actions {
        display: flex;
        gap: 12px;
        margin-bottom: 25px;
    }

    .qv-btn-view-details {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        padding: 12px 24px;
        background-color: #2563eb;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.3s ease;
        font-size: 15px;
    }

        .qv-btn-view-details:hover {
            background-color: #1d4ed8;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(37, 99, 235, 0.2);
        }

    .qv-btn-contact {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        padding: 12px 24px;
        background-color: #f59e0b;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.3s ease;
        font-size: 15px;
    }

        .qv-btn-contact:hover {
            background-color: #d97706;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(245, 158, 11, 0.2);
        }

    .qv-btn-add-wishlist {
        width: 46px;
        height: 46px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: white;
        color: #6b7280;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        font-size: 18px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .qv-btn-add-wishlist:hover {
            border-color: #e53e3e;
            color: #e53e3e;
            transform: translateY(-2px);
        }

    /* Contact Info */
    .qv-contact-info {
        margin-top: 25px;
        padding-top: 20px;
        border-top: 1px solid #e5e7eb;
    }

    .qv-contact-item {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 12px;
    }

        .qv-contact-item i {
            width: 36px;
            height: 36px;
            background-color: rgba(37, 99, 235, 0.1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #2563eb;
            font-size: 16px;
        }

    .qv-contact-label {
        display: block;
        font-size: 13px;
        color: #6b7280;
        margin-bottom: 2px;
    }

    .qv-contact-value {
        font-weight: 500;
        color: #111827;
        text-decoration: none;
        transition: color 0.2s ease;
    }

        .qv-contact-value:hover {
            color: #2563eb;
        }

    /* Responsive adjustments */
    media (max-width: 768px) {
        .qv-row

    {
        flex-direction: column;
        gap: 25px;
    }

    .qv-image {
        min-width: 100%;
    }

    .qv-details {
        min-width: 100%;
    }

    .qv-product-name {
        font-size: 22px;
    }

    .qv-product-price {
        font-size: 24px;
    }

    .qv-features-list {
        grid-template-columns: 1fr;
    }

    .qv-product-actions {
        flex-wrap: wrap;
    }

    .qv-btn-view-details,
    .qv-btn-contact {
        flex: 1;
        min-width: 120px;
        padding: 10px 16px;
        font-size: 14px;
    }

    .qv-btn-add-wishlist {
        width: 42px;
        height: 42px;
    }

    .modal-content {
        width: 95%;
    }

    .quick-view-content {
        padding: 20px;
    }

    }

    /* Toast notification styles */
    #qv-toast-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 9999;
    }

    .qv-toast {
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        margin-top: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: space-between;
        min-width: 300px;
        transform: translateY(20px);
        opacity: 0;
        transition: all 0.3s ease;
    }

    .qv-toast-success {
        background-color: #10b981;
    }

    .qv-toast-error {
        background-color: #ef4444;
    }

    .qv-toast-warning {
        background-color: #f59e0b;
    }

    .qv-toast-info {
        background-color: #3b82f6;
    }

</style>
<script>
    // Quick View functionality
    document.addEventListener("DOMContentLoaded", () => {
      // Initialize Quick View Modal
      initQuickViewModal()
    })

    function initQuickViewModal() {
      const modal = document.getElementById("quickViewModal")
      const closeBtn = modal?.querySelector(".close-modal")

      if (!modal) return

      // Close modal when clicking the close button
      if (closeBtn) {
        closeBtn.addEventListener("click", () => {
          closeQuickViewModal()
        })
      }

      // Close modal when clicking outside the content
      window.addEventListener("click", (event) => {
        if (event.target === modal) {
          closeQuickViewModal()
        }
      })

      // Close modal with Escape key
      document.addEventListener("keydown", (event) => {
        if (event.key === "Escape" && modal.style.display === "flex") {
          closeQuickViewModal()
        }
      })

      // Initialize retry button
      const retryBtn = document.getElementById("btnRetryQuickView")
      if (retryBtn) {
        retryBtn.addEventListener("click", () => {
          const productId = modal.getAttribute("data-product-id")
          if (productId) {
            loadQuickViewContent(productId)
          }
        })
      }
    }

    // Open Quick View Modal
    function quickView(productId) {
      if (!productId) return

      const modal = document.getElementById("quickViewModal")
      if (!modal) return

      // Set product ID
      modal.setAttribute("data-product-id", productId)

      // Show loading state
      document.getElementById("quickViewLoading").style.display = "flex"
      document.getElementById("quickViewError").style.display = "none"
      document.getElementById("quickViewContainer").style.display = "none"

      // Show modal
      modal.style.display = "flex"
      setTimeout(() => {
        modal.classList.add("show")
      }, 10)

      // Load content
      loadQuickViewContent(productId)
    }

    // Close Quick View Modal
    function closeQuickViewModal() {
      const modal = document.getElementById("quickViewModal")
      if (!modal) return

      modal.classList.remove("show")
      setTimeout(() => {
        modal.style.display = "none"
      }, 300)
    }

    // Load Quick View Content
    function loadQuickViewContent(productId) {
      const container = document.getElementById("quickViewContainer")
      const loading = document.getElementById("quickViewLoading")
      const error = document.getElementById("quickViewError")

      if (!container || !loading || !error) return

      // Show loading
      loading.style.display = "flex"
      error.style.display = "none"
      container.style.display = "none"

      // Fetch product data
      fetch(`/SanPhams/QuickView/${productId}`)
        .then((response) => {
          if (!response.ok) {
            throw new Error("Network response was not ok")
          }
          return response.text()
        })
        .then((html) => {
          // Hide loading
          loading.style.display = "none"

          // Show content
          container.innerHTML = html
          container.style.display = "block"

          // Initialize image gallery
          initQuickViewGallery()
        })
        .catch((error) => {
          console.error("Error loading quick view:", error)

          // Show error
          loading.style.display = "none"
          error.style.display = "flex"
        })
    }

    // Initialize Quick View Gallery
    function initQuickViewGallery() {
      const mainImage = document.getElementById("quickViewMainImage")
      const thumbnails = document.querySelectorAll(".qv-thumbnail")
      const prevBtn = document.getElementById("prevImage")
      const nextBtn = document.getElementById("nextImage")

      if (!mainImage || thumbnails.length === 0) return

      let currentIndex = 0
      const maxIndex = thumbnails.length - 1

      // Set first thumbnail as active
      thumbnails[0].classList.add("active")

      // Function to update the main image
      function updateMainImage(index) {
        if (index < 0) index = maxIndex
        if (index > maxIndex) index = 0

        currentIndex = index

        // Update active thumbnail
        thumbnails.forEach((thumb) => thumb.classList.remove("active"))
        thumbnails[index].classList.add("active")

        // Update main image
        const imgSrc = thumbnails[index].querySelector("img").src
        mainImage.src = imgSrc

        // Scroll thumbnail into view if needed
        thumbnails[index].scrollIntoView({ behavior: "smooth", block: "nearest", inline: "center" })
      }

      // Event listeners for navigation buttons
      if (prevBtn) {
        prevBtn.addEventListener("click", () => {
          updateMainImage(currentIndex - 1)
        })
      }

      if (nextBtn) {
        nextBtn.addEventListener("click", () => {
          updateMainImage(currentIndex + 1)
        })
      }

      // Add click event to thumbnails
      thumbnails.forEach((thumb, index) => {
        thumb.addEventListener("click", () => {
          updateMainImage(index)
        })
      })

      // Add keyboard navigation
      document.addEventListener("keydown", (e) => {
        if (document.getElementById("quickViewModal").classList.contains("show")) {
          if (e.key === "ArrowLeft") {
            updateMainImage(currentIndex - 1)
          } else if (e.key === "ArrowRight") {
            updateMainImage(currentIndex + 1)
          }
        }
      })
    }

    // Add to wishlist function
    function addToWishlist(productId) {
      const button = event.currentTarget
      const icon = button.querySelector("i")

      // Toggle heart icon
      if (icon.classList.contains("far")) {
        icon.classList.remove("far")
        icon.classList.add("fas")
        icon.style.color = "#e53e3e"

        // Show success message
        showQuickViewToast("Đã thêm vào danh sách yêu thích", "success")
      } else {
        icon.classList.remove("fas")
        icon.classList.add("far")
        icon.style.color = ""

        // Show remove message
        showQuickViewToast("Đã xóa khỏi danh sách yêu thích", "info")
      }

      // Send request to server
      fetch("/SanPhamYeuThiches/ToggleWishlist", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-TOKEN": document.querySelector('input[name="__RequestVerificationToken"]')?.value || "",
        },
        body: JSON.stringify({ productId: productId }),
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error("Network response was not ok")
          }
          return response.json()
        })
        .then((data) => {
          console.log("Wishlist updated:", data)
        })
        .catch((error) => {
          console.error("Error updating wishlist:", error)
          showQuickViewToast("Có lỗi xảy ra. Vui lòng thử lại sau.", "error")
        })
    }

    // Toast notification function
    function showQuickViewToast(message, type = "info") {
      // Check if toast container exists, if not create it
      let toastContainer = document.getElementById("qv-toast-container")
      if (!toastContainer) {
        toastContainer = document.createElement("div")
        toastContainer.id = "qv-toast-container"
        document.body.appendChild(toastContainer)
      }

      // Create toast element
      const toast = document.createElement("div")
      toast.className = `qv-toast qv-toast-${type}`

      // Set toast content
      toast.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <i class="fas fa-${
                  type === "success"
                    ? "check-circle"
                    : type === "error"
                      ? "exclamation-circle"
                      : type === "warning"
                        ? "exclamation-triangle"
                        : "info-circle"
                }"></i>
                <span>${message}</span>
            </div>
            <button style="background: none; border: none; color: white; cursor: pointer; font-size: 16px;">
                <i class="fas fa-times"></i>
            </button>
        `

      // Add to container
      toastContainer.appendChild(toast)

      // Animate in
      setTimeout(() => {
        toast.style.transform = "translateY(0)"
        toast.style.opacity = "1"
      }, 10)

      // Add close button functionality
      const closeBtn = toast.querySelector("button")
      closeBtn.addEventListener("click", () => {
        closeQuickViewToast(toast)
      })

      // Auto close after 4 seconds
      setTimeout(() => {
        closeQuickViewToast(toast)
      }, 4000)
    }

    function closeQuickViewToast(toast) {
      toast.style.transform = "translateY(20px)"
      toast.style.opacity = "0"

      setTimeout(() => {
        toast.remove()
      }, 300)
    }

    // Sử dụng form liên hệ hiện có thay vì mở modal báo giá
    function contactUs(idSanPham, tenSanPham) {
      // Chuyển hướng đến trang liên hệ với thông tin sản phẩm
      window.location.href = `/LienHe?idSanPham=${idSanPham}&tenSanPham=${tenSanPham}`
    }
</script>